// File: src/contexts/AuthContext.jsx
// Enhanced authentication context with CEA compliance

import React, { createContext, useContext, useEffect, useState } from 'react'
import { supabase, authHelpers } from '../lib/supabase'
import { toast } from 'react-hot-toast'

const AuthContext = createContext({})

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)
  const [userProfile, setUserProfile] = useState(null)
  const [loading, setLoading] = useState(true)
  const [isAuthenticated, setIsAuthenticated] = useState(false)

  // Initialize auth state
  useEffect(() => {
    // Check for existing session
    const initializeAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession()
        
        if (session?.user) {
          setUser(session.user)
          await loadUserProfile(session.user.id)
          setIsAuthenticated(true)
        } else {
          // Check for stored auth token (legacy)
          const storedToken = localStorage.getItem('cea_auth_token')
          const storedProfile = localStorage.getItem('cea_user_profile')
          
          if (storedToken && storedProfile) {
            try {
              const profile = JSON.parse(storedProfile)
              setUserProfile(profile)
              setIsAuthenticated(true)
            } catch (error) {
              localStorage.removeItem('cea_auth_token')
              localStorage.removeItem('cea_user_profile')
            }
          }
        }
      } catch (error) {
        console.error('Auth initialization error:', error)
      } finally {
        setLoading(false)
      }
    }

    initializeAuth()

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN' && session?.user) {
          setUser(session.user)
          await loadUserProfile(session.user.id)
          setIsAuthenticated(true)
        } else if (event === 'SIGNED_OUT') {
          setUser(null)
          setUserProfile(null)
          setIsAuthenticated(false)
          localStorage.removeItem('cea_auth_token')
          localStorage.removeItem('cea_user_profile')
        }
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  // Load user profile with CEA data
  const loadUserProfile = async (userId) => {
    try {
      const { data: profile, error } = await supabase
        .from('users')
        .select(`
          *,
          cea_licenses(*),
          teams(team_name, team_id),
          cpd_records(
            compliance_year,
            cpd_credits,
            training_hours,
            cpd_category,
            status
          )
        `)
        .eq('user_id', userId)
        .single()

      if (error) throw error

      // Calculate CPD compliance status
      const currentYear = new Date().getFullYear()
      const currentYearCPD = profile.cpd_records?.filter(
        record => record.compliance_year === currentYear && record.status === 'Completed'
      ) || []

      let cpdCompliant = false
      if (currentYear >= 2026) {
        // 2026 framework
        const peHours = currentYearCPD.filter(r => r.cpd_category === 'Structured_Learning_PE')
          .reduce((sum, r) => sum + (r.training_hours || 0), 0)
        const pcHours = currentYearCPD.filter(r => r.cpd_category === 'Structured_Learning_PC')
          .reduce((sum, r) => sum + (r.training_hours || 0), 0)
        const sdlHours = currentYearCPD.filter(r => r.cpd_category === 'Self_Directed_Learning_GC_Plus')
          .reduce((sum, r) => sum + (r.training_hours || 0), 0)
        
        cpdCompliant = peHours >= 4 && pcHours >= 8 && sdlHours >= 4
      } else {
        // Legacy framework
        const totalCredits = currentYearCPD.reduce((sum, r) => sum + (r.cpd_credits || 0), 0)
        cpdCompliant = totalCredits >= 6
      }

      // Update CPD compliance status if changed
      if (profile.cpd_compliance_status !== cpdCompliant) {
        await supabase
          .from('users')
          .update({ cpd_compliance_status: cpdCompliant })
          .eq('user_id', userId)
        
        profile.cpd_compliance_status = cpdCompliant
      }

      setUserProfile(profile)
      
      // Update stored profile
      localStorage.setItem('cea_user_profile', JSON.stringify(profile))

    } catch (error) {
      console.error('Error loading user profile:', error)
      toast.error('Failed to load user profile')
    }
  }

  // Sign in method
  const signIn = async (email, password) => {
    try {
      setLoading(true)
      
      const { data, error } = await authHelpers.signInWithEmail(email, password)
      if (error) throw error

      // Verify CEA license
      const { data: userProfile, error: profileError } = await supabase
        .from('users')
        .select(`
          *,
          cea_licenses!inner(*)
        `)
        .eq('email', email)
        .eq('cea_licenses.status', 'Active')
        .single()

      if (profileError || !userProfile) {
        await supabase.auth.signOut()
        throw new Error('No valid CEA license found. Please contact administrator.')
      }

      // Check if user is suspended
      if (userProfile.status === 'Suspended') {
        await supabase.auth.signOut()
        throw new Error('Account suspended. Please contact administrator.')
      }

      toast.success(`Welcome back, ${userProfile.user_name}!`)
      return { success: true }

    } catch (error) {
      console.error('Sign in error:', error)
      return { success: false, error: error.message }
    } finally {
      setLoading(false)
    }
  }

  // Sign up method
  const signUp = async (userData) => {
    try {
      setLoading(true)

      // Check if CEA registration number already exists
      const { data: existingUser } = await supabase
        .from('users')
        .select('cea_registration_number')
        .eq('cea_registration_number', userData.cea_registration_number)
        .single()

      if (existingUser) {
        throw new Error('CEA Registration Number already exists in system')
      }

      // Create auth user
      const { data: authData, error: authError } = await authHelpers.signUp(
        userData.email,
        userData.password,
        {
          name: userData.user_name,
          cea_reg: userData.cea_registration_number
        }
      )

      if (authError) throw authError

      // Create user profile
      const { error: profileError } = await supabase
        .from('users')
        .insert({
          user_id: authData.user.id,
          user_name: userData.user_name,
          email: userData.email,
          phone: userData.phone,
          cea_registration_number: userData.cea_registration_number,
          role: userData.role,
          status: 'Active',
          cpd_compliance_status: false
        })

      if (profileError) throw profileError

      // Create initial CEA license
      await supabase
        .from('cea_licenses')
        .insert({
          user_id: authData.user.id,
          license_type: userData.role === 'KEO' ? 'EA_LICENSE' : 'RES_REGISTRATION',
          license_number: userData.cea_registration_number,
          issue_date: new Date().toISOString().split('T')[0],
          expiry_date: new Date(Date.now() + 2 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          renewal_due_date: new Date(Date.now() + (2 * 365 - 30) * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        })

      toast.success('Registration successful! Please check your email for verification.')
      return { success: true }

    } catch (error) {
      console.error('Sign up error:', error)
      return { success: false, error: error.message }
    } finally {
      setLoading(false)
    }
  }

  // Sign out method
  const signOut = async () => {
    try {
      setLoading(true)
      await authHelpers.signOut()
      setUser(null)
      setUserProfile(null)
      setIsAuthenticated(false)
      localStorage.removeItem('cea_auth_token')
      localStorage.removeItem('cea_user_profile')
      toast.success('Signed out successfully')
      return { success: true }
    } catch (error) {
      console.error('Sign out error:', error)
      return { success: false, error: error.message }
    } finally {
      setLoading(false)
    }
  }

  // Reset password
  const resetPassword = async (email) => {
    try {
      setLoading(true)
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      })
      if (error) throw error
      
      toast.success('Password reset email sent!')
      return { success: true }
    } catch (error) {
      console.error('Reset password error:', error)
      return { success: false, error: error.message }
    } finally {
      setLoading(false)
    }
  }

  // Check permissions
  const hasPermission = (requiredRole) => {
    if (!userProfile) return false
    
    const roleHierarchy = {
      'Admin': 4,
      'KEO': 3,
      'Team_Leader': 2,
      'Salesperson': 1
    }
    
    return roleHierarchy[userProfile.role] >= roleHierarchy[requiredRole]
  }

  // Get team members (for Team Leaders and KEO)
  const getTeamMembers = async () => {
    if (!userProfile?.team_id) return []
    
    try {
      const { data, error } = await supabase
        .from('users')
        .select(`
          *,
          cea_licenses(status, expiry_date)
        `)
        .eq('team_id', userProfile.team_id)
        .eq('status', 'Active')
      
      if (error) throw error
      return data
    } catch (error) {
      console.error('Error fetching team members:', error)
      return []
    }
  }

  const value = {
    user,
    userProfile,
    loading,
    isAuthenticated,
    signIn,
    signUp,
    signOut,
    resetPassword,
    hasPermission,
    getTeamMembers,
    loadUserProfile
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}