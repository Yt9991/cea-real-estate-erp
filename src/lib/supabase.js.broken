// File: src/pages/auth/Login.jsx
// Complete authentication system with CEA license validation

import React, { useState, useEffect } from 'react'
import { supabase, authHelpers, ceaQueries } from '../../lib/supabase'
import { toast } from 'react-hot-toast'

const CEAAuthSystem = () => {
  const [mode, setMode] = useState('login') // 'login', 'register', 'forgot'
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    user_name: '',
    cea_registration_number: '',
    phone: '',
    role: 'agent'
  })
  const [loading, setLoading] = useState(false)
  const [errors, setErrors] = useState({})

  // CEA Registration Number validation
  const validateCEANumber = (regNumber) => {
    const pattern = /^[A-Z]\d{6}[A-Z]$/
    return pattern.test(regNumber)
  }

  // Form validation
  const validateForm = () => {
    const newErrors = {}

    // DEMO USER BYPASS - Skip validation for demo user
    if (formData.email === 'demo@cea.com' && formData.password === 'demo123') {
      const demoUser = {
        id: 'demo-123',
        user_id: 'demo-123',
        email: 'demo@cea.com',
        cea_registration_number: 'R123456A',
        role: 'agent',
        user_name: 'Demo Agent',
        phone: '+65 9123 4567',
        status: 'Active',
        cpd_compliance_status: true
      }
      
      localStorage.setItem('cea_auth_token', 'demo-token-12345')
      localStorage.setItem('cea_user_profile', JSON.stringify(demoUser))
      
      toast.success(`Welcome back, ${demoUser.user_name}!`)
      window.location.href = '/dashboard'
      return
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handle login - FIXED VERSION
  const handleLogin = async (e) => {
    e.preventDefault()
    if (!validateForm()) return

    setLoading(true)
    try {
      // DEMO USER BYPASS
      if (formData.email === 'demo@cea.com' && formData.password === 'demo123') {
        const demoUser = {
          id: 'demo-123',
          user_id: 'demo-123',
          email: 'demo@cea.com',
          cea_registration_number: 'R123456A',
          role: 'agent',
          user_name: 'Demo Agent',
          phone: '+65 9123 4567',
          status: 'Active',
          cpd_compliance_status: true,
          teams: { team_name: 'Demo Team' },
          cea_licenses: [{
            license_type: 'RES_REGISTRATION',
            license_number: 'R123456A',
            status: 'Active',
            expiry_date: '2026-12-31'
          }]
        }
        
        localStorage.setItem('cea_auth_token', 'demo-token-12345')
        localStorage.setItem('cea_user_profile', JSON.stringify(demoUser))
        
        toast.success(`Welcome back, ${demoUser.user_name}!`)
        window.location.href = '/dashboard'
        return
      }

      // Use the fixed authentication system
      const { data, error } = await authHelpers.signInWithEmail(
        formData.email, 
        formData.password
      )

      if (error) throw error

      // Check for valid CEA license using the new method
      const licenseCheck = await ceaQueries.checkCEALicense(data.user.id)
      
      if (!licenseCheck.hasLicense) {
        await supabase.auth.signOut()
        throw new Error('No valid CEA license found. Please contact administrator.')
      }

      // Get user profile information
      const { data: userProfile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', data.user.id)
        .maybeSingle()

      // Create complete user object for storage
      const completeUser = {
        id: data.user.id,
        user_id: data.user.id,
        email: data.user.email,
        user_name: userProfile?.name || data.user.email.split('@')[0],
        phone: userProfile?.mobile || '',
        cea_registration_number: licenseCheck.license.license_number,
        role: 'agent',
        status: 'Active',
        cpd_compliance_status: true,
        cea_licenses: [licenseCheck.license]
      }

      // Store auth token and user data
      localStorage.setItem('cea_auth_token', data.session.access_token)
      localStorage.setItem('cea_user_profile', JSON.stringify(completeUser))

      toast.success(`Welcome back, ${completeUser.user_name}!`)
      
      // Redirect to dashboard
      window.location.href = '/dashboard'

    } catch (error) {
      console.error('Login error:', error)
      toast.error(error.message)
      setErrors({ submit: error.message })
    } finally {
      setLoading(false)
    }
  }

  // Handle registration - UPDATED VERSION
  const handleRegister = async (e) => {
    e.preventDefault()
    if (!validateForm()) return

    setLoading(true)
    try {
      // First check if CEA registration number is already in use
      const { data: existingLicense } = await supabase
        .from('cea_licenses')
        .select('license_number')
        .eq('license_number', formData.cea_registration_number)
        .single()

      if (existingLicense) {
        throw new Error('CEA Registration Number already exists in system')
      }

      // Create Supabase auth user
      const { data: authData, error: authError } = await authHelpers.signUp(
        formData.email,
        formData.password,
        {
          name: formData.user_name,
          cea_reg: formData.cea_registration_number
        }
      )

      if (authError) throw authError

      // Create user profile
      const { error: profileError } = await supabase
        .from('user_profiles')
        .insert({
          user_id: authData.user.id,
          name: formData.user_name,
          mobile: formData.phone,
          address: '',
          emergency_contact: {},
          social_media: {}
        })

      if (profileError) throw profileError

      // Create initial CEA license record
      const { error: licenseError } = await supabase
        .from('cea_licenses')
        .insert({
          user_id: authData.user.id,
          license_type: formData.role === 'keo' ? 'EA_LICENSE' : 'RES_REGISTRATION',
          license_number: formData.cea_registration_number,
          issue_date: new Date().toISOString().split('T')[0],
          expiry_date: new Date(Date.now() + 2 * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 2 years
          status: 'Active',
          renewal_due_date: new Date(Date.now() + (2 * 365 - 30) * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // 30 days before expiry
        })

      if (licenseError) throw licenseError

      toast.success('Registration successful! Please check your email for verification.')
      setMode('login')

    } catch (error) {
      console.error('Registration error:', error)
      toast.error(error.message)
      setErrors({ submit: error.message })
    } finally {
      setLoading(false)
    }
  }

  // Handle forgot password
  const handleForgotPassword = async (e) => {
    e.preventDefault()
    if (!formData.email) {
      setErrors({ email: 'Email is required' })
      return
    }

    setLoading(true)
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(formData.email, {
        redirectTo: `${window.location.origin}/reset-password`
      })

      if (error) throw error

      toast.success('Password reset email sent!')
      setMode('login')

    } catch (error) {
      toast.error(error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

}
